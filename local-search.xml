<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Tech::一台树莓派到底能拿来干什么？</title>
    <link href="/2021/05/07/tech-%E4%B8%80%E5%8F%B0%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%B0%E5%BA%95%E8%83%BD%E6%8B%BF%E6%9D%A5%E5%B9%B2%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2021/05/07/tech-%E4%B8%80%E5%8F%B0%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%B0%E5%BA%95%E8%83%BD%E6%8B%BF%E6%9D%A5%E5%B9%B2%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>哪个年轻人不想拥有自己的一台树莓派呢？这是一个非常值得讨论的问题。截至2019年底，树莓派的销售量已经到达三千万台。虽然这玩意并不能真正意义上拿来当作办公用电脑，但是手握一台信用大大小的单片机着实是一件很酷的事情，尤其是当这台机器可以完成大多数电脑也能干的事情的时候。套用那句非常非常老的话，就是用过树莓派基本不会失望，没用过树莓派不知道自己之后不会因此而失望。</p><p>我是今年年初的时候，因为要做arduino相关的一个项目，被朋友忽悠了入的。后来发现，我是用五百RMB换来一台属于自己的服务器！如果说IPV6推广的话，那么事实上我已经不需要购置其他厂商的VPS了，因为这玩意基本上可以完成所有VPS能干的事情，如果说他有公网IP的话。</p><h1 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h1><p>树莓派是什么？简而言之，树莓派就是一台电脑，只不过非常之小，小到可以揣在口袋里带走。</p><p>它好在哪里？它好就好在他的CPU性能不俗，功耗低，便宜。你只要花上大概四百到五百人民币的价格，就能把这台小巧的卡片计算器带回家。也就是说，一台surface book2大概顶的上20台树莓派。如果说你买电脑只是为了一个文本编辑器，为什么不买一个树莓派呢？</p><p>它的另外一些好处有，你可以一直开着它，让他一直运行一些服务。普通的电脑你不用的时候通常会把他关机。</p><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>当树莓派到手的时候，你需要干的事情有：</p><ol><li>买树莓派和对应的SD卡。一般来说32G的就已经很够用了。</li><li>组装外壳。</li><li>给你的SD卡刷好系统，并添加ssh文件（强烈建议）</li><li>插入SD卡。</li><li>通电。</li><li>使用ssh登录你的树莓派。</li><li>爱干嘛干嘛~</li></ol><p>这样就完成了。是不是非常简单！</p><h2 id="刷系统"><a href="#刷系统" class="headerlink" title="刷系统"></a>刷系统</h2><p>树莓派是有属于自己的操作系统的。这个os被称作Raspberry Pi OS，之前也叫raspbian,因为是基于debian的类unix操作系统。从2015年开始，树莓派基金会就已经宣布raspberry pi os作为树莓派的首选系统。</p><p>这个系统最早是由Mike Thompson和Peter Green两位大佬在一个独立的项目里于2012年六月编译出来的。</p><p>为了把系统放进你的树莓派里充当软硬件的沟通媒介，你需要一个专有的写入程序。你可以在<a href="https://www.raspberrypi.org/software/">这个界面</a>下载安装程序，里面会自带镜像文件。</p><p>用读卡器连接SD卡与你的电脑，并选择这个SD卡作为你的目标硬盘。选择你将要安装的操作系统，等待就OK。</p><h3 id="ssh文件"><a href="#ssh文件" class="headerlink" title="ssh文件"></a>ssh文件</h3><p>一般来说，搞定之后的树莓派里面是没有ssh文件的。但是如果要便捷地控制树莓派的话，ssh往往是最好的方式。没有人想把自己的显示屏拆下来再用hdmi线连上这台机器。</p><p>要激活树莓派的ssh功能也非常简单。直接在根目录里面新建一个ssh文件，问题就解决了。你也可以通过一些其他方式来打开树莓派本身的ssh，但是我觉得这个方法最简单。</p><p>事实上，这说明了raspberry pi os是自带openssh的，只是没有启用而已。</p><h2 id="登录树莓派"><a href="#登录树莓派" class="headerlink" title="登录树莓派"></a>登录树莓派</h2><p>要登录树莓派非常容易。前提条件是你需要知道你的树莓派的IP地址。</p><p>要使你的树莓派的ssh可用，你必须把他接上互联网。最简单的方法是插到路由器的LAN口，这样他就和你的电脑处于同一内网下……前提是你的电脑也连到了这个路由器。</p><p>查询路由器的IP表就可以知道树莓派的IP地址了。在个人PC上使用 ssh连接：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">$ssh <span class="hljs-built_in">pi</span>@$&#123;ip <span class="hljs-built_in">address</span>&#125;<br><span class="hljs-built_in">pi</span>@$&#123;ip <span class="hljs-built_in">address</span>&#125;&#x27;s passwo<span class="hljs-symbol">rd:</span><br></code></pre></td></tr></table></figure><p>注意，一定要用pi用户登录。这是raspberry pi os的一个内置用户。用root是无法登录的。</p><p>当你没有做任何修改的时候，默认密码就是raspberry。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Linux raspberrypi <span class="hljs-number">5.10</span>.<span class="hljs-number">17</span>-v7l+ <span class="hljs-comment">#1403 SMP Mon Feb 22 11:33:35 GMT 2021 armv7l</span><br><br>The programs included <span class="hljs-keyword">with</span> the Debian GNU/Linux system are free software;<br>the exact distribution terms <span class="hljs-keyword">for</span> each program are described <span class="hljs-keyword">in</span> the<br>individual files <span class="hljs-keyword">in</span> <span class="hljs-regexp">/usr/share/doc/</span>*/copyright.<br><br>Debian GNU/Linux comes <span class="hljs-keyword">with</span> ABSOLUTELY NO WARRANTY, <span class="hljs-keyword">to</span> the extent<br>permitted <span class="hljs-keyword">by</span> applicable law.<br>Last login: -<br><br>SSH <span class="hljs-keyword">is</span> enabled <span class="hljs-keyword">and</span> the <span class="hljs-keyword">default</span> password <span class="hljs-keyword">for</span> the <span class="hljs-string">&#x27;pi&#x27;</span> user has <span class="hljs-keyword">not</span> been changed.<br>This <span class="hljs-keyword">is</span> a security risk - please login <span class="hljs-keyword">as</span> the <span class="hljs-string">&#x27;pi&#x27;</span> user <span class="hljs-keyword">and</span> type <span class="hljs-string">&#x27;passwd&#x27;</span> <span class="hljs-keyword">to</span> set a <span class="hljs-keyword">new</span> password.<br><br><br>Wi-Fi <span class="hljs-keyword">is</span> currently blocked <span class="hljs-keyword">by</span> rfkill.<br>Use raspi-config <span class="hljs-keyword">to</span> set the country before use.<br><br>pi@raspberrypi:~ $<br></code></pre></td></tr></table></figure><p>如果你可以看到这些提示信息，那么恭喜你。</p><h1 id="你可以用它来干什么？"><a href="#你可以用它来干什么？" class="headerlink" title="你可以用它来干什么？"></a>你可以用它来干什么？</h1><p>刚才说过，树莓派实际上和你的个人电脑没有什么区别，除了它小了点，运算效果差了点之外，操作系统不那么习惯而已。</p><p>实际上，如果你给他分配一个公网的IP地址，它可以胜任所有VPS能干的事情。比如说科学上网的服务器，只要你的公网IP不在合法区域。比如说你可以拿他来跑我上篇文章里写的机器人程序，或者用它来运行这个网站。</p><p>贴一张图~</p><p><img src="/img/raspi.jpg"></p><p>这玩意竟然有RGB，真是让人感慨。</p>]]></content>
    
    
    <categories>
      
      <category>Excerption</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tech::关于telegram bot的琐碎</title>
    <link href="/2021/04/30/Tech-%E5%85%B3%E4%BA%8Etelegram-bot%E7%9A%84%E7%90%90%E7%A2%8E/"/>
    <url>/2021/04/30/Tech-%E5%85%B3%E4%BA%8Etelegram-bot%E7%9A%84%E7%90%90%E7%A2%8E/</url>
    
    <content type="html"><![CDATA[<p>前因：</p><blockquote><p>Patchy<br>隔壁之前有人弄个单纯随机复读的</p><p>Patchy<br>已经通过了群友的人类认可</p><p>Cedar<br>就是听了您的那个，觉得很有意思</p><p>Cedar<br>所以手撸了一个</p></blockquote><hr><p>笑死，根本笑不死。</p><p>俺敲代码从来没有一个目标的，因为我就是门外汉（自豪）</p><p>之前听群友说，隔壁群曾经出了一个bot，是不是复读群友消息结果没有人发现这玩意是bot，我直接宣布这个bot通过图灵测试（迫真）</p><p>所以说，自己想搞一个自己的版本，不仅能复读，还能有其他生草功能。顺便一窥telegram的bot是怎么实现的。</p><h1 id="bot的出生"><a href="#bot的出生" class="headerlink" title="bot的出生"></a>bot的出生</h1><p>bot是从bot中生出来的，<strong>生殖隔离确认</strong></p><p>这个生bot的bot是telegram的一个官方bot，名叫<a href="https://t.me/BotFather">@botfather</a> .管生bot的人叫father无论如何都很奇怪吧。</p><p>当你向他输入/newbot指令的时候，一个bot的诞生就开始了。跟随他的指令，命名你的新bot。你输入的名字将会成为这个bot的用户名。</p><p>当bot生成之后，你可以通过/mybots来查看或者编辑这个bot的相关信息。</p><p>最重要的是，botfather在创建完这个bot之后，会给予一个独一无二的identifier,那就是这个bot的token。只有在token对应的时候，你才可以指挥你的bot。</p><h1 id="pytelegrambot相关"><a href="#pytelegrambot相关" class="headerlink" title="pytelegrambot相关"></a>pytelegrambot相关</h1><p>我是用pytelegrambot这个库写的，这个库十分优雅而强大，足够应付所有你想实现的功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pyTelegramBotAPI<br></code></pre></td></tr></table></figure><p>安装方法如上。当你安装好了之后，新建一个python文件，在顶部写上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> telebot<br><br>bot = telebot.TeleBot(<span class="hljs-string">&quot;TOKEN&quot;</span>, parse_mode=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>这样，bot就以token的形式实例化出来了。</p><p>根据pytelegrambot的官方文件，一个bot的例子是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@bot.message_handler(<span class="hljs-params">commands=[<span class="hljs-string">&#x27;start&#x27;</span>, <span class="hljs-string">&#x27;help&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_welcome</span>(<span class="hljs-params">message</span>):</span><br>bot.reply_to(message, <span class="hljs-string">&quot;Howdy, how are you doing?&quot;</span>)<br></code></pre></td></tr></table></figure><p>这里定义了一个函数，对于/start和/help这两个指令，bot将会执行send_welcome这个函数，并发送信息”Howdy, how are you doing?“。</p><p>这里，pytelegrambot提供了一个十分友好的装饰器@bot.message_handler，可以对发给bot的消息进行筛查。查阅源码可知：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">message_handler</span>(<span class="hljs-params">self, commands=<span class="hljs-literal">None</span>, regexp=<span class="hljs-literal">None</span>, func=<span class="hljs-literal">None</span>, content_types=<span class="hljs-literal">None</span>, **kwargs</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Message handler decorator.</span><br><span class="hljs-string">    This decorator can be used to decorate functions that must handle certain types of messages.</span><br><span class="hljs-string">    All message handlers are tested in the order they were added.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Example:</span><br><span class="hljs-string"></span><br><span class="hljs-string">    bot = TeleBot(&#x27;TOKEN&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    # Handles all messages which text matches regexp.</span><br><span class="hljs-string">    @bot.message_handler(regexp=&#x27;someregexp&#x27;)</span><br><span class="hljs-string">    def command_help(message):</span><br><span class="hljs-string">        bot.send_message(message.chat.id, &#x27;Did someone call for help?&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    # Handle all sent documents of type &#x27;text/plain&#x27;.</span><br><span class="hljs-string">    @bot.message_handler(func=lambda message: message.document.mime_type == &#x27;text/plain&#x27;, content_types=[&#x27;document&#x27;])</span><br><span class="hljs-string">    def command_handle_document(message):</span><br><span class="hljs-string">        bot.send_message(message.chat.id, &#x27;Document received, sir!&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    # Handle all other messages.</span><br><span class="hljs-string">    @bot.message_handler(func=lambda message: True, content_types=[&#x27;audio&#x27;, &#x27;photo&#x27;, &#x27;voice&#x27;, &#x27;video&#x27;, &#x27;document&#x27;, &#x27;text&#x27;, &#x27;location&#x27;, &#x27;contact&#x27;, &#x27;sticker&#x27;])</span><br><span class="hljs-string">    def default_command(message):</span><br><span class="hljs-string">        bot.send_message(message.chat.id, &quot;This is the default command handler.&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param commands: Optional list of strings (commands to handle).</span><br><span class="hljs-string">    :param regexp: Optional regular expression.</span><br><span class="hljs-string">    :param func: Optional lambda function. The lambda receives the message to test as the first parameter. It must return True if the command should handle the message.</span><br><span class="hljs-string">    :param content_types: This commands&#x27; supported content types. Must be a list. Defaults to [&#x27;text&#x27;].</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>这个装饰器可以用指令，正则，lamda函数以及内容的方式对发给bot的信息进行筛查，并确定是否执行你所定义的函数。</p><p>但是，当你执行这个python文件，bot并不会启动，这是因为这只是个定义性的代码文件，而并没有让bot跑起来。你需要在结尾加上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">bot.polling()<br></code></pre></td></tr></table></figure><p>这个polling方法可以让这个bot不断监听进入的消息，并按照不同情况执行上文所提到的message handler.但是这个方法实际上有坑；如果说进入的消息过多的话，服务器会认定受到了攻击，并停止这个bot。此时你的python文件会以”远程服务器强制终止了一个现有链接“停止。</p><p>为了避免这种情况的出现，pytelegrambot的api十分贴心地提供了另外一个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">bot.infinity_polling()<br></code></pre></td></tr></table></figure><p>从这个名字就可以看出来，当polling失败的时候，这个bot会重新建立连接，周而复始。</p><h1 id="what-now"><a href="#what-now" class="headerlink" title="what now?"></a>what now?</h1><p>在了解了这些基本的操作之后，你已经可以写一个复读机bot了。原理十分简单，如果要使复读是随机的话，你只需要求助于random库即可。</p><p>pytelegrambot还提供了其他好用的api，比如说发meme，发图片，甚至是让bot在群组中执行管理员权限，等等。限制你发挥的仅仅是你的想象力。</p><p><a href="https://t.me/cedar_234_bot">我的bot</a>能做到的事情有，时不时以<em>某种方式</em>复读，时不时发怪图，时不时说怪话。</p><p>你可以尝试和他对话，或者把他丢到某个群里。</p><p>你也可以在<a href="https://github.com/cedarsaigyouji/nonsense_chat_bot">我的github仓库</a>里面找到这玩意。</p><p>以上。</p><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>对了，你如果要让这个bot一直开着，你就得让这个程序一直开着。如果你只有一台电脑的话，那就意味着你这台电脑没法关机。</p><p>而我直接整了个raspi4b，放在上面就跑这玩意。下次聊聊我还用树莓派干了些什么。</p>]]></content>
    
    
    <categories>
      
      <category>techtips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Excerpt:: 编译第一条MIPS指令</title>
    <link href="/2021/02/16/Excerpt-%E7%BC%96%E8%AF%91%E7%AC%AC%E4%B8%80%E6%9D%A1MIPS%E6%8C%87%E4%BB%A4/"/>
    <url>/2021/02/16/Excerpt-%E7%BC%96%E8%AF%91%E7%AC%AC%E4%B8%80%E6%9D%A1MIPS%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>本文摘自<a href="https://blog.csdn.net/qq_42650988/article/details/103532682">https://blog.csdn.net/qq_42650988/article/details/103532682</a></p><hr><h2 id="Linux学习的点点滴滴（二）"><a href="#Linux学习的点点滴滴（二）" class="headerlink" title="Linux学习的点点滴滴（二）"></a>Linux学习的点点滴滴（二）</h2><p>其实本文跟Linux关系并不是那么大，是我在自己写CPU的过程中总结的东西，之前只用Word写在自己电脑里了，想着哪天放到博客上。<br>本文是在写CPU进行测试的时候需要将汇编翻译成机器码的过程，刚开始学的时候，也遇到了一些小问题，在此记录。</p><h3 id="一、安装GNU工具链"><a href="#一、安装GNU工具链" class="headerlink" title="一、安装GNU工具链"></a>一、安装GNU工具链</h3><p>gcc编译器使用的是龙芯公司的，使用了MIPS架构。<a href="http://ftp.loongnix.org/toolchain/gcc/release/gcc-4.3-ls232.tar.gz">下载地址</a><br>进入Linux虚拟机的<code>/opt</code>文件夹（其实哪个都无所谓），在终端输入<code>tar -zxvf gcc-4.3-ls232.tar.gz</code>，这里<code>tar -zxvf</code>是<code>.tar.gz</code>文件的解压缩命令，后面会详细介绍其他的<a href="https://blog.csdn.net/qq_42650988/article/details/103532682#tar">解压缩命令</a><br>解压缩之后，首先配置环境变量，找到当前用户的文件夹下的隐藏文件<code>.bashrc</code>，如果遇到权限不够，用<code>chmod</code>修改权限之后，打开文件，在文件最后一行加上<br><code>export PATH=”$PATH:password/opt/gcc-4.3-ls232/bin”</code><br>在终端输入<code>echo $PATH</code>查看已经配好的环境变量，（echo是回显命令，是常见的脚本命令）<br><img src="https://img-blog.csdnimg.cn/20191213201547316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="echo"><br>然后输入<code>mipsel-linux-gcc -v</code>，如下图表示GNU工具链安装完成：<br><img src="https://img-blog.csdnimg.cn/20191213201800255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="GNU"><br>有个很坑的地方，如果提示：bash ./ 没有那个文件或目录，是因为Ubuntu是64位的，没有32位的运行库，安装一个32位运行库即可：<code>apt-get install lib32z1</code><br>至此基本的准备工作就完成了，但是在此过程中不熟悉Linux系统会导致一些列问题，在此总结一下。</p><h3 id="二、解压缩命令"><a href="#二、解压缩命令" class="headerlink" title="二、解压缩命令"></a>二、解压缩命令</h3><p>常见的解压缩命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar<br>-c: 建立压缩档案<br>-x：解压<br>-t：查看内容<br>-r：向压缩归档文件末尾追加文件<br>-u：更新原压缩包中的文件<br>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。<br><br>-z：有gzip属性的<br>-j：有bz2属性的<br>-Z：有compress属性的<br>-v：显示所有过程<br>-O：将文件解开到标准输出<br>下面的参数-f是必须的<br>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。<br>tar -cf all.tar *.jpg<br>这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。<br>tar -rf all.tar *.gif<br>这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。<br>tar -uf all.tar logo.gif<br>这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。<br>tar -tf all.tar<br>这条命令是列出all.tar包中所有文件，-t是列出文件的意思<br>tar -xf all.tar<br>这条命令是解出all.tar包中所有文件，-t是解开的意思<br><br>//压缩<br>tar -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg <br>tar -czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz<br>tar -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2<br>tar -cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z<br>rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux<br>zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux<br><br>//解压<br>tar -xvf file.tar //解压 tar包<br>tar -xzvf file.tar.gz //解压tar.gz<br>tar -xjvf file.tar.bz2   //解压 tar.bz2<br>tar -xZvf file.tar.Z   //解压tar.Z<br>unrar e file.rar //解压rar<br>unzip file.zip//解压zip<br><br>//总结<br>1、*.tar 用 tar -xvf 解压<br>2、*.gz 用 gzip -d 或者gunzip 解压<br>3、*.tar.gz 和 *.tgz 用 tar -xzf 解压<br>4、*.bz2 用 bzip2 -d或者用bunzip2 解压<br>5、*.tar.bz2 用 tar -xjf 解压<br>6、*.Z 用 uncompress 解压<br>7、*.tar.Z 用tar -xZf 解压<br>8、*.rar 用 unrar e解压<br>9、*.zip 用 unzip 解压*<br>12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152<br></code></pre></td></tr></table></figure><h3 id="三、关于环境变量"><a href="#三、关于环境变量" class="headerlink" title="三、关于环境变量"></a>三、关于环境变量</h3><p>类似于Windows下的环境变量，本质含义就是让系统运行一个程序时，不仅仅要在当前目录下面寻找，还要到PATH指定的路径下寻找，此操作实际简化了程序执行的复杂度，提高了效率。<br>以上面的GCC路径为例，我们写入的PATH路径为：<code>export PATH=”$PATH:/opt/gcc-4.3-ls232/bin”</code><br>什么意思？可以把PATH看成一个字符串，用<code>“/”、“：”、“\$”</code> 等符号进行划分，系统根据划分的字符串寻找目标地址。因为PATH是一个字符串，用“$PATH”表示引用这个字符串，就是表示PATH所指的内容；<code>：</code>是Linux中分隔符，相当于Windows中的<code>；</code>，因此该语句表示在原有的PATH路径下再加上<code>/opt/gcc-4.3-ls232/bin</code>路径，我们在终端中检验一下：<br><img src="https://img-blog.csdnimg.cn/20191213203136581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实际上，若要仅仅配置GCC，不需要加上之前的PATH路径，因此只要这样写即可：<br><code>export PATH=”/opt/gcc-4.3-ls232/bin&quot;</code>.我们在终端中再次输入echo $PATH，结果证明是正确的，gcc安装无误：<br><img src="https://img-blog.csdnimg.cn/20191213203218185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="四、编译汇编指令"><a href="#四、编译汇编指令" class="headerlink" title="四、编译汇编指令"></a>四、编译汇编指令</h3><p>我们先编写一组汇编指令，命名为<code>inst_rom.S</code><br><img src="https://img-blog.csdnimg.cn/20191213203317375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们在终端中输入指令:<br><code>mipsel-linux-as -mips32 inst_rom.S -o inst_rom.o</code>，表示用as工具将inst_rom.S文件编译成<code>inst_rom.o</code>文件再输入：<br><code>mipsel-linux-ld -T ram.ld inst_rom.o -o inst_ram.om</code>，表示将<code>inst_rom.o</code>文件链接成<code>inst_rom.om</code>文件。再输入：<br><code>mipsel-linux-objcopy -O binary inst_rom.om inst_ram.bin</code>，根据.om文件得到了bin文件，再输入：<br><code>mipsel-linux-objdump -D inst_rom.om &gt; inst_ram.asm</code>，对汇编指令进行反汇编，得到与机器指令对应的二进制字。<br>最后将Bin2MEM.exe拷贝到与inst_rom系列文件相同的目录下，执行<br><code>./Bin2Mem.exe -f inst_rom.bin -o inst_rom.data</code><br>第一次执行应该需要修改Bin2Mem.exe文件的权限，输入：<br><code>Chmod 777 Bin2Mem.exe</code>，最终转化为与Vivado程序中读入的文件类型（.data），执行结果如图：<br><img src="https://img-blog.csdnimg.cn/20191213203518724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="没有描述~~~"><br>生成的文件：<br><img src="https://img-blog.csdnimg.cn/20191213203550517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们打开inst_rom.data文件查看：<br><img src="https://img-blog.csdnimg.cn/20191213203609232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这便是我们一开始那几条汇编指令的机器指令。</p><h3 id="五、大小端地址"><a href="#五、大小端地址" class="headerlink" title="五、大小端地址"></a>五、大小端地址</h3><p>大端（存储）模式：是指一个数据的低位字节序的内容放在高地址处，高位字节序存的内容放在低地址处。<br>小端（存储）模式：是指一个数据的低位字节序内容存放在低地址处，高位字节序的内容存放在高地址处。（可以总结为“小小小”即低位、低地址、小端）<br>在上述的例子中，我们发现原来的机器指令34011100变成了00110134，高位数据放在了地址的高位，是小端存储，这样看上去不是很方便，我们可以修改编译指令改变最终编译的结果，输入<code>mipsel-linux-as -help</code>查看帮助：<br><img src="https://img-blog.csdnimg.cn/20191213203859994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191213203906390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们修改指令：<br><img src="https://img-blog.csdnimg.cn/2019121320391995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看inst_rom.data文件：<br><img src="https://img-blog.csdnimg.cn/20191213203929149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>已经修改为大端模式了。我们需要修改为大端模式，因为该OpenMIPS就是大端模式。</p><h3 id="六、Make工具"><a href="#六、Make工具" class="headerlink" title="六、Make工具"></a>六、Make工具</h3><p>每次都输入四个（加上.asm一共五个）指令显得很麻烦，我们可以编写一个脚本来自动执行命令。<br>make便是Linux上的一个脚本，当我们只输入make命令的工作流程是：</p><ol><li>make会在当前目录下找名字叫“Makefile”或“makefile”的文件；</li><li>如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“inst_rom.data”这个文件，并把这个文件作为最终的目标文件；</li><li>如果inst_rom.data文件不存在，或是.data所依赖的后面的 .om 文件的文件修改时间要比.data这个文件新，那么make会执行下面定义的命令来生成.data文件；</li><li>如果.data所依赖的.om文件也存在，那么make会在当前文件中找目标为.om文件的依赖性，如果找到再根据命令生成.om文件（这是一个递归的过程）；</li></ol><p>如果在找寻的过程中，出现了被依赖的文件找不到的错误，那么make就会直接退出，并报错。<br>如果在一条依赖链中，比如：A依赖B，B依赖C，C依赖D。那么当D更新后，make发现D比C新则会重新构建C，以此类推，最终A也会被更新。<br>简单的说，makefile带来的好处就是——自动化编译，只要一个make命令，所有工程和文件自动编译，类似于Shell的.sh和cmd的.bat</p><p>我们编写如下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell">ifndef CROSS_COMPILE<br>CROSS_COMPILE = mipsel-linux-<br>endif<br>CC = $(CROSS_COMPILE)as<br>LD = $(CROSS_COMPILE)ld<br><br>OBJCOPY = $(CROSS_COMPILE)objcopy<br>OBJDUMP = $(CROSS_COMPILE)objdump<br><br>OBJECTS = inst_rom.o<br>export CROSS_COMPILE<br>all:inst_rom.data inst_rom.om inst_rom.o inst_rom.bin inst_rom.asm<br><br><span class="hljs-meta">%</span><span class="bash">.o:%.S</span><br><span class="hljs-meta">$</span><span class="bash">(CC) -mips32 -EB $&lt; -o <span class="hljs-variable">$@</span></span><br><br>inst_rom.om:ram.ld $(OBJECTS) <br><span class="hljs-meta">$</span><span class="bash">(LD) -EB -T ram.ld $(OBJECTS) -o <span class="hljs-variable">$@</span></span><br><br>inst_rom.bin:inst_rom.om<br><span class="hljs-meta">$</span><span class="bash">(OBJCOPY) -O binary $&lt; <span class="hljs-variable">$@</span></span><br><br>inst_rom.asm:inst_rom.om<br><span class="hljs-meta">$</span><span class="bash">(OBJDUMP) -D $&lt; &gt;<span class="hljs-variable">$@</span></span><br><br>inst_rom.data:inst_rom.bin<br>./Bin2Mem.exe -f $&lt; -o $@<br><br>clean:<br>rm -f *.o *.om *.bin *.data<br>123456789101112131415161718192021222324252627282930<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191213204254687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNjUwOTg4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中 <code>$&lt;</code> 表示第一个依赖文件的名称，<code>$@</code> 表示目标的完整名称</p><p>至此，我们用gcc编译汇编指令生成机器码的过程就做完了。</p><h3 id="七、ram-ld链接代码"><a href="#七、ram-ld链接代码" class="headerlink" title="七、ram.ld链接代码"></a>七、ram.ld链接代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">MEMORY<br>        &#123;      <br>        ram(RW)    : ORIGIN = 0x00000000, LENGTH = 0x00001000<br>        &#125;<br>SECTIONS<br>&#123;<br>  /*<br>  For some reason the linker script can&#x27;t see the _reset_vector symbol <br>  (even if we declare it global), so we explicitly set it. */<br>.text :<br>        &#123;<br>        *(.text)<br>        &#125; &gt; ram<br><br>        .data :<br>        &#123;<br>        *(.data)<br>        &#125; &gt; ram<br>        .bss :<br>        &#123;<br>        *(.bss)<br>        &#125; &gt; ram<br>        .stack  ALIGN(0x10) (NOLOAD):<br>        &#123;<br>        *(.stack)<br>        _ram_end = .;<br>        &#125; &gt; ram<br>&#125;<br>ENTRY (_start)<br>1234567891011121314151617181920212223242526272829<br></code></pre></td></tr></table></figure><h3 id="八、Bin2Mem-c代码"><a href="#八、Bin2Mem-c代码" class="headerlink" title="八、Bin2Mem.c代码"></a>八、Bin2Mem.c代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">char</span> *option_invalid  = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span> *option_file_in  = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">char</span> *option_file_out = <span class="hljs-literal">NULL</span>;<br><br>FILE *file_in_descriptor  = <span class="hljs-literal">NULL</span>;<br>FILE *file_out_descriptor = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exception_handler</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code)</span> </span>&#123;<br>    <span class="hljs-keyword">switch</span> (code) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">10001</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error (10001): No option recognized.\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please specify at least one valid option.\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">10002</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error (10002): Invalid option: %s\n&quot;</span>, option_invalid);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">10003</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error (10003): No input Binary file specified.\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">10004</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error (10004): Cannot open file: %s\n&quot;</span>, option_file_in);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">10005</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error (10005): Cannot create file: %s\n&quot;</span>, option_file_out);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (file_in_descriptor  != <span class="hljs-literal">NULL</span>) &#123;<br>        fclose(file_in_descriptor);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (file_out_descriptor != <span class="hljs-literal">NULL</span>) &#123;<br>        fclose(file_out_descriptor);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> **argv)</span> </span>&#123;<br> <br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> temp1,temp2,temp3,temp4;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> option_flag = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (argc &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (**argv == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            (*argv) ++;<br>            <span class="hljs-keyword">switch</span> (**argv) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;f&#x27;</span>:<br>                    option_flag |= <span class="hljs-number">0x4</span>;<br>                    argv ++;<br>                    option_file_in = *argv;<br>                    argc --;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;o&#x27;</span>:<br>                    option_flag |= <span class="hljs-number">0x8</span>;<br>                    argv ++;<br>                    option_file_out = *argv;<br>                    argc --;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    option_flag |= <span class="hljs-number">0x1</span>;<br>                    (*argv) --;<br>                    option_invalid = *argv;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        argv ++;<br>        argc --;<br>    &#125;<br><br>    file_in_descriptor = fopen(option_file_in, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file_in_descriptor == <span class="hljs-literal">NULL</span>) &#123;<br>        exception_handler(<span class="hljs-number">10004</span>);<br>    &#125;<br><br>    file_out_descriptor = fopen(option_file_out, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file_out_descriptor == <span class="hljs-literal">NULL</span>) &#123;<br>        exception_handler(<span class="hljs-number">10005</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (!feof(file_in_descriptor)) &#123;<br>         <br>            <span class="hljs-built_in">fscanf</span>(file_in_descriptor, <span class="hljs-string">&quot;%c&quot;</span>, &amp;temp1);<br>            <span class="hljs-built_in">fscanf</span>(file_in_descriptor, <span class="hljs-string">&quot;%c&quot;</span>, &amp;temp2);<br>            <span class="hljs-built_in">fscanf</span>(file_in_descriptor, <span class="hljs-string">&quot;%c&quot;</span>, &amp;temp3);<br>            <span class="hljs-built_in">fscanf</span>(file_in_descriptor, <span class="hljs-string">&quot;%c&quot;</span>, &amp;temp4);<br><br>            <span class="hljs-keyword">if</span>(!feof(file_in_descriptor)) &#123;<br>             <span class="hljs-built_in">fprintf</span>(file_out_descriptor, <span class="hljs-string">&quot;%02x&quot;</span>, temp1);<br>             <span class="hljs-built_in">fprintf</span>(file_out_descriptor, <span class="hljs-string">&quot;%02x&quot;</span>, temp2);<br>             <span class="hljs-built_in">fprintf</span>(file_out_descriptor, <span class="hljs-string">&quot;%02x&quot;</span>, temp3);<br>             <span class="hljs-built_in">fprintf</span>(file_out_descriptor, <span class="hljs-string">&quot;%02x&quot;</span>, temp4);<br>             <span class="hljs-built_in">fprintf</span>(file_out_descriptor, <span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125; <br>    &#125;<br><br>    exception_handler(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Excerption</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tech::在wsl上搭建MIPS交叉编译环境</title>
    <link href="/2021/02/13/Tech-%E5%9C%A8wsl%E4%B8%8A%E6%90%AD%E5%BB%BAMIPS%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/02/13/Tech-%E5%9C%A8wsl%E4%B8%8A%E6%90%AD%E5%BB%BAMIPS%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>年初一晚上吃完饭回来想继续搞自己写了一丁点的MIPS32架构的CPU，看了一下教材想自己搞定一下GNU工具链完成对MIPS32架构汇编的编译。但是昨天把源码下到wsl里面跑了一下发现报错：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">-bash: /home/cedar/GNUworkfile/mips-2014.05/bin/mips-sde-elf-as: cannot<span class="hljs-built_in"> execute </span>binary file: Exec format error<br></code></pre></td></tr></table></figure><p>一拍脑袋，自己的PC是x86架构的，没法对MIPS进行编译。查了一下万能的stackoverflow，给我指了一条死路，让我去下一个ubuntu64 for arm试试看。今天早上起来丢进vmware，果然挂了；vmware也没法搞定arm架构的虚拟机。</p><p>下午甚至试了一下把树莓派装起来看看能不能跑，结果是同样报错。最后试了一下gcc和qemu交叉编译环境搭建，成功了，也是折腾的不行。</p><p>最后想了一下原因，树莓派是64位的，PC也是，但是目标CPU是32位base。</p><h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><p>先把qemu和配置的binfmt搞定：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">sudo apt install qemu-user-static<br>sudo update-binfmts --install i386 /usr/bin/qemu-i386-static --magic &#x27;<span class="hljs-symbol">\x</span>7fELF<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00&#x27; --mask &#x27;<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>fc<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>f8<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff&#x27;<br></code></pre></td></tr></table></figure><p>然后启动binfmt服务：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">sudo</span> service binfmt-sup<span class="hljs-keyword">port</span> start<br></code></pre></td></tr></table></figure><p>配置i386(32位)内核包：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">sudo dpkg --<span class="hljs-keyword">add</span>-architecture <span class="hljs-type">i386</span><br>sudo apt update<br>sudo apt install gcc:<span class="hljs-type">i386</span><br></code></pre></td></tr></table></figure><p>这一步很重要，因为实际上是从64位到32位出问题的。一会可以看到结果。</p><p>现在来试试。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">cedar@cedar<span class="hljs-literal">-grandArchive</span>:~/assembly<span class="hljs-variable">$</span> mips<span class="hljs-literal">-sde</span><span class="hljs-literal">-elf</span><span class="hljs-operator">-as</span> <span class="hljs-literal">-mips32</span> inst_rom.S <span class="hljs-literal">-o</span> inst_rom.o<br>cedar@cedar<span class="hljs-literal">-grandArchive</span>:~/assembly<span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span><br>inst_rom.S  inst_rom.o<br></code></pre></td></tr></table></figure><p>非常nice.</p><p>试试把i386 support关了，然后再来一次；</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">cedar<span class="hljs-meta">@cedar</span>-<span class="hljs-attr">grandArchive:</span>~/assembly$ sudo service binfmt-support stop<br>[sudo] password <span class="hljs-keyword">for</span> <span class="hljs-attr">cedar:</span><br> * Disabling additional executable binary formats binfmt-support                                                 [ OK ]<br>cedar<span class="hljs-meta">@cedar</span>-<span class="hljs-attr">grandArchive:</span>~/assembly$ mips-sde-elf-<span class="hljs-keyword">as</span> -mips32 inst_rom.S -o inst_rom.o<br>-<span class="hljs-attr">bash:</span> <span class="hljs-regexp">/home/</span>cedar<span class="hljs-regexp">/GNUworkfile/</span>mips<span class="hljs-number">-2014.05</span><span class="hljs-regexp">/bin/</span>mips-sde-elf-<span class="hljs-attr">as:</span> cannot execute binary <span class="hljs-attr">file:</span> Exec format error<br></code></pre></td></tr></table></figure><p>和预期一致。</p><h1 id="缺少32位库"><a href="#缺少32位库" class="headerlink" title="缺少32位库"></a>缺少32位库</h1><p>当然你还有可能出现这种情况：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">/lib/ld-linux.<span class="hljs-keyword">so</span>.<span class="hljs-number">2</span>: <span class="hljs-keyword">bad</span> ELF interpreter: No such <span class="hljs-keyword">file</span> <span class="hljs-built_in">or</span> directory<br></code></pre></td></tr></table></figure><p>这个报错是因为缺少ld-linux.so.2引起的，如果是用ubuntu的话可以用apt-get来安装。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> update<br>apt-<span class="hljs-builtin-name">get</span> install ia32-libs<br></code></pre></td></tr></table></figure><p>这样就搞定了。nice job!</p>]]></content>
    
    
    <categories>
      
      <category>techtips</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Awareness</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Note::庚子备忘录</title>
    <link href="/2021/02/12/note-%E5%BA%9A%E5%AD%90%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <url>/2021/02/12/note-%E5%BA%9A%E5%AD%90%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>lmy: 在异地过年的时候 就想起你！</p><p>me: 我和朋友聊了一个晚上</p><p>​        没有家 过年的味道会慢慢淡去</p><p>​        逐渐模糊 变成只有一个符号</p></blockquote><h1 id="引"><a href="#引" class="headerlink" title="引"></a>引</h1><p>2020庚子年实在不是一个好年。从年头到年尾都充满了各种各样荒诞无经、无法预知的事件冲突。</p><p>大概从年初开始的疫情爆发，再到之后的项目研究，再到之后的关于科研方向的不断转移，我一直是陷在特别迷茫的状态。</p><p>有时候——不，是很经常，我会不由自主地陷在过往的回忆里面。想起自己的初中，高中，想起自己不知道为什么努力但是每天都在花时间的日子。</p><p>可能在这种情况下的充实感会给我一些心理上的慰藉？但是当决定权真的下到自己手上的时候，我真的愿意为自己所作的决定负责吗。</p><p>这是一个问题，嗯。我一直在想的一个问题。</p><hr><p>有时候和朋友聊天，会发现自己实际上充满了很多致命的弱点。比方说，自负，比方说，关于他人的看法云云。</p><p>我自己对诸如此类的性格深恶痛绝，但是又无法割裂。</p><p>之前在一个半夜和TS聊天，他和我聊了挺多东西，关于如何看待生活，看待自己的所作所为，看待他人对自己的评价。</p><p>我现在确实觉得，年龄越大，能交心的人越来越少了。这是实话。所以有时候碰到像TS这样的好人，我真的觉得特别珍贵。</p><p>不过这段聊天过程也是去年的一个很大的收获。也许成熟并不是一段一段的蜕变，而是重新审视并包容原本的自己。</p><hr><p>庚子年有很多的想法，关于去UCB交换，关于自己的实习，关于自己的科研，关于自己的实习。</p><p>我觉得，如果能把这些事情都搞定，那我真是太厉害了。确实是这样，很朴素的想法。</p><p>不得不说，现在有时候看自己过往的成就，有时候我爸会提醒我：这一切都不是你的成就。在你的所有achievements背后，都有某个人或者某些人在支撑你。或许是你的朋友，你的家人，甚至是你不喜欢的人。他们都会在某个地方，某种意义下给你一剂强心剂，或者给予你非常直接的帮助。</p><p>以前我不相信这句话，可能是因为我过于自负。不过愚蠢与自大往往源于无知，现在我觉得这句话很有道理。</p><p>因此对于以前曾经帮助过我的人，我希望你们都能在新的一年里活得有厚度。当然，我对于自己的生活的看法一直都没有变。我觉得，我很幸运，并且生活很踏实，也很有厚度。</p><p>就这样。诸事顺遂，得偿所愿。</p><p>谨贺新年。</p>]]></content>
    
    
    <categories>
      
      <category>essay</category>
      
    </categories>
    
    
    <tags>
      
      <tag>whimsical</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Essay::”蔚蓝“（celeste）的山</title>
    <link href="/2021/02/01/essay-Celeste/"/>
    <url>/2021/02/01/essay-Celeste/</url>
    
    <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/1rwAvUvvQzQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>在加拿大的温哥华岛上，有这么一座山，名叫Mount Celeste.</p><iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d1112662.7720402095!2d-125.75177882832826!3d49.62888403963422!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x548830cfd314931b%3A0xc6e4ad8d275b74a9!2sMount%20Celeste!5e0!3m2!1sen!2ssg!4v1612181311819!5m2!1sen!2ssg" width="600" height="450" frameborder="0" style="border:0;" allowfullscreen="" aria-hidden="false" tabindex="0"></iframe><p>这座山位于太平洋的东北角，在加拿大和美西的交界地。那么北的鬼地方，这座山无疑是座雪山。</p><p><strong>你如果说没有人想要爬这种鬼山，那你就错了。</strong>根据wikipedia的记录，在1934年的八月，Jack Horbury和Jock Sutherland完成了第一次有记载的攀登记录。</p><p>我很喜欢曾经攀登过珠穆朗玛峰的登山者乔治·马洛里说过的一句话，当年在他爬珠穆朗玛峰之前，有人问他为什么一定要登上那座山。</p><p>然后他回答，因为它就在那里。</p><p>这句话成为了千古名言，而乔治·马洛里也和他的这句话一起，葬在了珠穆朗玛峰的山顶。</p><p>第一位成功攀登珠穆朗玛峰而成功归来的人是埃德蒙·希拉里。希拉里在1953年登顶了这个世界最高之地，平安归来并且活到了2008年。这座世界渴望顶峰在英语里的惯称并不是藏语的音译<em>Chomolungma</em>，而是另外一个比较有深意的名字：Mount Everest。Ever-Rest, 永远安息。</p><p>回归正题。或许并不是每个人都有一个登山的梦想，但是每个人心中都会有恐惧。站在山脚下望着或许看得到或许看不到的珠穆朗玛峰顶部，登山者也许会发自内心的感到恐惧。从来没有人爬上过这座山——我可能成功吗？如果说我死了，那么谁来给我收尸呢？</p><p>但是他们依然奋不顾身地往上前进，然后死在那里。他们并没有爬上这座山并活着回来，但是他们战胜了内心的恐惧。也许这就足够浪漫了。</p><hr><p>玛德琳并不是一个经验丰富的登山运动员。她懦弱，胆小，深陷抑郁症。但是这次，她决定把自己的车子停在山脚下，把自己的通讯设备留下来，然后往上攀登，直到她登上这座名叫celeste的山的山顶。</p><p>“蔚蓝”（Celeste）讲的便是这么一个简单的故事。这个无论从什么方面都简单至极的游戏——对话，人物，操作，故事情节，设定，玩法——却惊人地进入了2018年的TGA候选名单，并夺得了最佳独立游戏与最具影响力游戏的桂冠。是什么让这个游戏如此具有魅力？是这座山，还是爬山的人，还是观看这个故事的我们？</p><p>故事从一个废弃的城市开始。游戏中值得称道的地方有很多，但是我最喜欢的还是引导式的游戏体验。这种不带教程的逐步设定实际上把教程和游戏内容联系在一起，而把这个手法用的最成熟的作品无疑还是Valve的看家神作之一——传送门（portal）。<strong>GLaDOS</strong>，传送门中的反派，在游戏初期扮演玩家的引导者，而在之后的游戏流程中不断给予指引，然而玩家可以明显地感觉到，指引由最早的不带感情色彩到逐步的不怀好意直到最后的摊牌。这种手法把教程给予者的身份给玩家下了一个第一印象，而当真相揭晓的时候玩家又颇有一种豁然开朗恍然大悟之感。而在蔚蓝中，这种引导手法不再由某个角色来执行，而是靠着地图的精妙设计。</p><p>地图的精妙是基于操作的简明完成的。身为一个活生生的人类，玛德琳可以爬墙，但是会失去体力。玛德琳可以走动，可以跳跃，但是不能二连跳。她唯一超乎常人的一点能力是滞空时的短距离冲刺，而这个能力成为了这个游戏的核心技能。通过完成这些简单的动作搭配，很多看上去无法完成的平台跳跃操作都能逐渐被玩家攻克。当然，在游戏的初期，地图简明易懂，通过爬墙跳跃一系列简单操作的上手过程之后，难度逐步加大，而在掌握了某种新的跳跃方式之后，玩家又要被强迫掌握这种新的方式——也就是说，通过上一个地图的特殊方式也许会成为下一个地图不可或缺的前置方法。</p><p>这种引导式的学习法实际上帮助玩家从无到有不知不觉地掌握了简单而精妙的享受游戏的过程。当然，这种引导方式往往被评价为“困难”，甚至成为了游戏的一个标签。上一个这种类型的游戏，是宫崎英高的“魂”系列。作为ARPG的风向标式的明星人物，宫崎先生很了解如何抓住玩家的心。通过不断设置逐步增加的困难关卡，玩家从0到1完成了游戏制作者要求的对游戏的掌握程度。根据宫崎本人的访谈，这种游戏方式实际上还原了本源的游戏手法。实际上在上世纪80年代，许多祖宗级别的电子游戏实际上早已经使用了这种方式——如魂斗罗之类的FC街机游戏等。因此近年来的魂系游戏崛起，只不过是对旧时光的一次文艺复兴行动而已。</p><p>玩家是很欲擒故纵的一种生物。实际上，近年来游戏的“傻瓜式”趋势，完全体现了游戏制作人对于玩家毫无下限的体贴，以及对于难度的无限制放宽。然而，心理学家早已证明，人的成就感的发散，与在剧烈运动之后的多巴胺的分泌某种意义上同源。也就是说，成就感源于对于每一次困难的攻克，而这种成就感会反过来促进对于下次困难的跃跃欲试之感。这是老生常谈的cliche。</p><p>另一种方面来说，信息时代的到来改变了信息来源。在早期的信息时代，发布媒体的只是一小部分人，因此大多数人听取一部分人的意见。互联网的广泛使用之后，大多数人都可以发表意见，因此是大多数人听取大多数人的意见。然而现在的媒体，在借助大数据的工具之后，完成了对每一个独立思考个体的思想封闭。早上在google上搜索了A，那么这个东西就会出现在晚上的推送里。如果你继续点击这个推送，那么类似的推送就会纷至沓来。因此在现今的信息时代，不是大多数人听取大多数人的意见，而是每个人都在听取自己的意见。</p><p>老话说兼听则明，偏信则暗。这也许就是为什么现在互联网上这么多喷子的原因。</p><p>而魂系游戏，相对于其他游戏而言，在游戏难度设定上便是采取了另外一种看法。如果给玩家难度的选择，那么大多数人都会选择简单。毕竟人就是这样懒惰的生物。那么如果说取消所有的难度评级呢？从某种意义上来说，这就是从玩家自己听取自己的意见，到玩家听取制作者的意见的时候了。这是另外一个方面的文艺复兴。</p><hr><p>这个游戏有很多寓意。从玛德琳对于这座山的看法变动，到她的内心具象化，再到最后她登上山顶战胜恐惧的过程。很多东西不必多说，故事由我们来书写。</p><p><strong>你如果说没有人想要爬这种鬼山，那你就错了。</strong>仅仅在2018年，这个精美的独立游戏就获得了50万的销量，而team上攀上顶峰成就的占比为40%，也就是说至少有二十万人已经征服了这座山，即使他们并没有物理意义到过加拿大。但是战胜自己，或者说获得自我救赎的旅程无疑更加精彩。</p>]]></content>
    
    
    <categories>
      
      <category>essay</category>
      
    </categories>
    
    
    <tags>
      
      <tag>whimsical</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Note::hello world</title>
    <link href="/2021/01/30/hello-world/"/>
    <url>/2021/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>2021年1月30日，本站重启。</p><p>这里是cedar，写点自己想写的。</p>]]></content>
    
    
    <categories>
      
      <category>Note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
